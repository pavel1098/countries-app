{"version":3,"sources":["components/Header.js","components/Country.js","components/CountriesList.js","components/SideBar.js","App.js","serviceWorker.js","index.js","images/loader.svg"],"names":["Header","className","href","Country","props","country","flag","src","alt","name","capital","region","population","timezones","map","zone","key","arr","length","currencies","currency","code","symbol","translations","de","es","it","CountriesList","isFetching","preloader","countries","i","SideBar","type","value","checked","selectedRegion","onChange","handleOptionChange","onClick","getCountriesByRegion","App","event","setState","target","console","log","a","fetch","then","res","json","result","error","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.cb865ce0.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n  return (\n      <div className='nav-wrapper'>\n        <a href=\"#\">Countries</a>\n      </div>\n  )\n}\n\nexport default Header;","import React from 'react'\n\nconst Country = (props) => {\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        {\n          props.country.flag == null \n          ? <img src=\"https://omegamma.com.au/wp-content/uploads/2017/04/default-image.jpg\" alt=\"card image\"/>\n          : <img src={props.country.flag } />\n        }\n      </div>\n      <div className=\"info\">\n      <div className='name'>\n          <h2>{props.country.name}</h2>\n        </div>\n        <hr/>\n        <div className=\"capital\">\n          <strong>Capital:</strong>  {props.country.capital}\n        </div>\n        <hr/>\n        <div className=\"region\">\n        <strong>Region:</strong>  {props.country.region}\n        </div>\n        <hr/>\n        <div className=\"population\">\n        <strong>Population:</strong> {props.country.population}\n        </div>\n        <hr/>\n        <div className=\"timeZones\">\n        <strong>Timezones:</strong> {props.country.timezones.map((zone, key, arr) => {\n            return  ((key < arr.length-1) ? `${zone}, ` : `${zone}`)\n          })}\n        </div>\n        <hr/>\n        <div className=\"currencies\">\n        <strong>Currencies:</strong> {props.country.currencies.map((currency, key, arr) => {\n            return ((key < arr.length-1) ? `${currency.code} ${currency.symbol}, ` : `${currency.code} ${currency.symbol}`)\n          })}\n        </div>\n        <hr/>\n        <div className=\"translations\">\n        <strong>Translations:</strong>\n          <li>de: {props.country.translations.de}</li>\n          <li>es: {props.country.translations.es}</li>\n          <li>it: {props.country.translations.it}</li>\n        </div> \n      </div>\n    </div>\n  )\n}\n\nexport default Country","import React from 'react'\nimport Country from './Country'\nimport preloader  from '../images/loader.svg'\n\nconst CountriesList = (props) => {\n  return (\n      <div className=\"list-wrapper\">\n        { props.isFetching ? <img src={preloader} alt=\"preloader\"/> : null}\n        {\n          props.countries.map((country, i) => {\n            return (\n              <Country key={i} country={country} />\n            )\n          })\n      }\n      </div>\n  )\n}\n\nexport default CountriesList;","import React from 'react'\n\nconst SideBar = (props) => {\n  return (\n    <div className='sidebar'>\n      <h3 className=\"bar-item\">Countries by region</h3>\n      <form>\n        <p><input type=\"radio\" \n                  name='region' \n                  value='africa' \n                  checked={props.selectedRegion === 'africa'}\n                  onChange={props.handleOptionChange} /> Africa</p>\n        <p><input type=\"radio\" \n                  name='region' \n                  value='americas' \n                  checked={props.selectedRegion === 'americas'}\n                  onChange={props.handleOptionChange} /> Americas</p>\n         <p><input type=\"radio\" \n                  name='region' \n                  value='asia' \n                  checked={props.selectedRegion === 'asia'}\n                  onChange={props.handleOptionChange} /> Asia</p>\n          <p><input type=\"radio\" \n                  name='region' \n                  value='europe' \n                  checked={props.selectedRegion === 'europe'}\n                  onChange={props.handleOptionChange} /> Europe</p>\n          <p><input type=\"radio\" \n                  name='region' \n                  value='oceania' \n                  checked={props.selectedRegion === 'oceania'}\n                  onChange={props.handleOptionChange} /> Oceania</p>\n        <button className='btn' type='button' onClick={() => {props.getCountriesByRegion(props.selectedRegion)}}>Make your choice</button>\n      </form>\n    </div>\n  )\n}\n\nexport default SideBar;","import React from 'react';\nimport Header from './components/Header';\nimport CountriesList from './components/CountriesList';\nimport SideBar from './components/SideBar';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      countries: [],\n      isFetching: true,\n      selectedRegion: null\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://restcountries.eu/rest/v2/all')\n      .then(res => res.json())\n      .then(result => {\n        this.setState({\n          isFetching: false,\n          countries: result\n        });\n      },\n      (error) => {\n        this.setState({\n          isFetching: false,\n          error\n        });\n      });\n  }\n\n  handleOptionChange = (event) => {\n    this.setState({\n      selectedRegion: event.target.value\n    });\n    console.log(event.target.value)\n  }\n\n  getCountriesByRegion = async (region) => {\n    await fetch(`https://restcountries.eu/rest/v2/region/${region}`)\n      .then(res => res.json())\n      .then(result => {\n        console.log(result);\n        this.setState({\n          isFetching: false,\n          countries: result\n        });\n      },\n      (error) => {\n        this.setState({\n          isFetching: false,\n          error\n        });\n      })\n      console.log(this.state.selectedRegion)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SideBar handleOptionChange={this.handleOptionChange} getCountriesByRegion={this.getCountriesByRegion} selectedRegion={this.state.selectedRegion} />\n        <CountriesList countries={this.state.countries} isFetching={this.state.isFetching}/>\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/loader.d8b3f08b.svg\";"],"sourceRoot":""}